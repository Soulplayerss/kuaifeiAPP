<template>
	<view class="testDevice"
		:style="{ width:  viewportWidth ? viewportWidth + 'px' : '100%' , height:  viewportHeight ? viewportHeight + 'px' : '100%', fontSize: 15 + 'px', color: '#FFF'}">
		<web-view src="/static/webRTC/onminirtc.html" :style="{ width:  viewportWidth ? viewportWidth + 'px' : '100%' , height:  viewportHeight ? viewportHeight + 'px' : '100%'}"></web-view>
		<view class="body"
			:style="{ width:  viewportWidth ? viewportWidth * 0.9 + 'px' : '90%' , height:  viewportHeight ? viewportHeight + 'px' : '100%'}">
			<cover-view class="verifyBox" v-if="showVerify">
				<u-icon name="play-left-fill" :size="20" color="#FFF"></u-icon>
				<cover-view class="verifyContent">
					<cover-view class="flex justify-between title">
						释放降落伞
						<u-icon name="close" :size="20" @click="showVerify = false"></u-icon>
					</cover-view>
					<view class="verify" style="overflow: hidden;">
						<view class="content" :style="{ left: left + 'px' }">
							<view class="round" @touchstart.prevent="onTouchStart($event)"
								@touchmove.prevent="onTouchMove($event)" @touchend="onTouchEnd">
							</view>
						</view>
					</view>
				</cover-view>
			</cover-view>
			<view class="topInfo" :style="{ width:  viewportWidth ? viewportWidth * 0.9 + 'px' : '100%'}">
				<view class="parachute"
					style="background-color: #FFF;padding: 6px;position: relative;margin-left: 16px;"
					@click="showVerify = !showVerify">
					<image src="@/static/parachute.png" mode="" style="width: 32px;height: 32px;"></image>

				</view>

				<view class="_item" style="color: #FFF;">
					<view>电池电压：{{socket503Data.voltage_battery}} V</view>
					<view>电池电流：{{socket503Data.current_battery}} A</view>
					<view>电池电量：{{socket503Data.battery_remaining}}</view>
					<view>信号强度：{{socket501Data.myCsq}}</view>
				</view>

				<image src="@/static/over.png" mode="" style="width: 30px;height: 30px;" @click="back">
				</image>
			</view>
			<view class="rockerBtns" :style="{ width:  viewportWidth ? viewportWidth * 0.9 + 'px' : '100%'}">
				<rocker ref="rockerRef" style="position: relative;" :innerRadius='innerRadius'
					:outerRadius="outerRadius" id="motor" @moveRocker="moveRocker" @stopMoveRocker="stopMoveRocker">
				</rocker>
				<view class="actionButtonBox">
					<view class="actionButton" :class="[fiveActive == 'up' ? 'activeFiveButton' : '']">
						<image src="@/static/up.png" mode="" @click="sendFiveMessage(5, 'up')"
							style="width: 36px;height: 36px;"></image>
					</view>
					<view class="actionButton" :class="[fiveActive == 'center' ? 'activeFiveButton' : '']">
						<image src="@/static/center.png" mode="" @click="sendFiveMessage(0, 'center')"
							style="width: 36px;height: 36px;"></image>
					</view>
					<view class="actionButton" :class="[fiveActive == 'down' ? 'activeFiveButton' : '']">
						<image src="@/static/down.png" mode="" @click="sendFiveMessage(-5, 'down')"
							style="width: 36px;height: 36px;"></image>
					</view>
				</view>
				<view class="actionButtonBox">
					<view class="actionButton" :class="[sixActive == 'up' ? 'activeFiveButton' : '']">
						<image src="@/static/up.png" mode="" @click="sendSixMessage(5, 'up')"
							style="width: 36px;height: 36px;"></image>
					</view>
					<view class="actionButton" :class="[sixActive == 'center' ? 'activeFiveButton' : '']">
						<image src="@/static/center.png" mode="" @click="sendSixMessage(0, 'center')"
							style="width: 36px;height: 36px;"></image>
					</view>
					<view class="actionButton" :class="[sixActive == 'down' ? 'activeFiveButton' : '']">
						<image src="@/static/down.png" mode="" @click="sendSixMessage(-5, 'down')"
							style="width: 36px;height: 36px;"></image>
					</view>
				</view>
				<rocker ref="rockerRef" style="position: relative;" :innerRadius='innerRadius'
					:outerRadius="outerRadius" id="rudder" @moveRocker="moveRocker" @stopMoveRocker="stopMoveRocker">
				</rocker>
			</view>
		</view>
	</view>
</template>

<script>
	import rocker from '@/components/harin-supper-rocker-nvue/index.nvue';
	import XlSliderVerify from '@/components/common/XlSliderVerify.vue'
	import request from '@/utils/request';
	import {
		socketUrl
	} from '@/utils/request';
	export default {
		components: {
			rocker,
			XlSliderVerify
		},
		data() {
			return {
				innerRadius: 50,
				outerRadius: 150,
				rockerRef: null,
				viewportWidth: null,
				viewportHeight: null,
				fiveActive: 'center',
				sixActive: 'center',
				showVerify: false,
				hours: 0,
				minutes: 0,
				seconds: 0,
				parentWidth: 150, // 父元素宽度
				parentHeight: 150, // 父元素高度
				draggableWidth: 50, // 子元素宽度
				draggableHeight: 50, // 子元素高度
				newDirection: '', //  电机新方向
				oldDirection: '', //  电机老方向
				ruddernewDirection: '', //  航舵新方向
				rudderoldDirection: '', //  航舵老方向
				counter: 0,
				socket: null,
				intervarTime: null,
				rudderIntervarTime: null,
				fiveIntervarTime: null,
				sixIntervarTime: null,
				heartbeatInterval: null, // 心跳定时器
				heartbeatTimeout: null, // 心跳超时定时器
				reconnectTimeout: null, // 重连定时器
				reconnectAttempts: 0, // 重连次数
				maxReconnectAttempts: 5, // 最大重连次数
				isBack: false, // 最大重连次数
				socket501Data: {},
				socket502Data: {},
				socket503Data: {},
				socket504Data: {},
				logList: [],
				sliderLeftList: [{
					x: 0,
					y: 0,
					isDragging: false,
					startX: 0,
					startY: 0,
					box2Left: 0,
					box2Width: 200,
					identifier: null
				}],
				sliderRightList: [{
					x: 182,
					y: 0,
					isDragging: false,
					startX: 0,
					startY: 0,
					box2Left: 0,
					identifier: null
				}],
				box2Left: 0,
				message: '',
				startTouch: [],
				moveTouch: [],
				endTouch: [],
				endIdentifier: null,
				unrepeatedObjects: {},
				touching: false,
				isSocket: false,
				touchCancel: [],
				left: -160,
				startX: 0,
				startY: 0,
				isDragging: false,
				isSend: false
			}
		},
		onLoad(options) {
			const {
				macAddress,
				carId
			} = options;
			this.macAddress = macAddress
			this.carId = carId
		},
		onShow() {
			const systemInfo = uni.getSystemInfoSync();
			if (systemInfo.windowHeight > systemInfo.windowWidth) {
				this.viewportWidth = systemInfo.windowHeight;
				this.viewportHeight = systemInfo.windowWidth;
			} else {
				this.viewportWidth = systemInfo.windowWidth;
				this.viewportHeight = systemInfo.windowHeight;
			}
			// 设置横屏
			plus.screen.lockOrientation('landscape-primary');
		},
		mounted() {
			this.isBack = false
			this.getCarInfo()
		},
		methods: {
			back() {
				this.$emit('back')
				this.clearHeartbeat(); // 清理心跳和重连
				this.isBack = true
				if (this.socket) {
					this.closeWebSocket();
				}
				plus.screen.lockOrientation('portrait-primary')
				uni.navigateTo({
					url: '/pages/car/car'
				});
			},
			async getCarInfo() {
				try {
					const response = await request(`/app/carInfo/getInfoByCarId/${this.carId}`, 'GET')
					if (response.code === 200) {
						let data = JSON.parse(JSON.stringify(response.data))
						this.carInfo = data
						if (this.carInfo.appCarChannelList.length) {
							this.initWebSocket();
							// this.carInfo.appCarChannelList.forEach((item) => {
							// 	item.defaultMinValue = item.minValue
							// 	item.defaultMaxValue = item.maxValue
							// 	this.sliderLeftList.push({
							// 		x: 0,
							// 		y: 0,
							// 		isDragging: false,
							// 		startX: 0,
							// 		startY: 0,
							// 		box2Left: 0,
							// 		box2Width: 200,
							// 		identifier: null
							// 	})
							// 	this.sliderRightList.push({
							// 		x: 182,
							// 		y: 0,
							// 		isDragging: false,
							// 		startX: 0,
							// 		startY: 0,
							// 		box2Left: 0,
							// 		identifier: null
							// 	})
							// })
						}
					}
				} catch (error) {
					console.log(error)
					uni.showToast({
						title: '加载失败',
						icon: 'none',
					});
				}
			},
			async endCar() {
				try {
					const response = await request(`/app/carInfo/endCar/${this.macAddress}`, 'GET')
					if (response.code == 200) {
						this.back()
					}
				} catch (error) {
					uni.showToast({
						title: '结束失败',
						icon: 'none',
					});
				}
			},
			// 触摸开始时，记录起始位置
			onTouchStart(event) {
				console.log('开始触摸')
				if (!this.isSend) {
					this.isDragging = true;
				}
				this.startX = event.touches[0].clientX ? event.touches[0].clientX - this.left : event.touches[0].screenX -
					this.left;
			},
			// 触摸移动时，更新元素的位置
			onTouchMove(event) {
				if (this.isDragging) {
					const newX = event.touches[0].clientX ? event.touches[0].clientX - this.startX : event.touches[0]
						.screenX -
						this.startX
					if (newX >= 0) {
						if (!this.isSend) {
							this.verifySuccess()
							uni.showToast({
								title: '打开成功',
								icon: 'success',
							});
						}
						this.left = 0
						this.isSend = true
					} else if (newX <= -160) {
						this.left = -160
					} else {
						this.left = newX
					}
				}
			},
			// 触摸结束时，停止拖动
			onTouchEnd() {
				this.isSend = false
				this.isDragging = false;
				this.left = -160
			},
			verifySuccess() {
				this.sendMessage(JSON.stringify({
					"bizCode": 605,
					"handledParachuteSwitch": 1,
					"timestamp": this.getTimestamp(),
					"mac": this.macAddress
				}))
			},
			onSliderLeftTouchStart(index, event) {
				const touch = event.touches[event.touches.length - 1]; // 当前的最后一个触摸点
				const handle = this.sliderLeftList[index];
				if (!handle.isDragging) {
					handle.isDragging = true;
					handle.startX = touch.clientX - handle.x;
					handle.startY = touch.clientY - handle.y;
					handle.identifier = touch.identifier; // 记录触摸点的 identifier
				}
			},
			onSliderLeftTouchMove(index, event) {
				const handle = this.sliderLeftList[index];
				if (!handle.isDragging) return;

				// 根据 identifier 找到当前触摸点
				const touch = Array.from(event.touches).find(
					(t) => t.identifier == handle.identifier
				);
				if (!touch) return;

				const newX = touch.clientX - handle.startX;

				const maxX = this.sliderRightList[index].x - 36;

				handle.x = Math.min(Math.max(newX, 0), maxX)
				handle.box2Left = Math.min(Math.max(newX, 0), maxX)
				handle.box2Width = this.sliderRightList[index].x - Math.min(Math.max(newX, 0), maxX)

				let channelItem = this.carInfo.appCarChannelList[index]
				channelItem.minValue = Math.round(channelItem.defaultMinValue + (((channelItem.defaultMaxValue -
					channelItem.defaultMinValue) / 200) * handle.x))
			},
			onSliderLeftTouchEnd(index, event) {
				const handle = this.sliderLeftList[index];
				const touch = Array.from(event.changedTouches).find(
					(t) => t.identifier == handle.identifier
				);
				if (touch) {
					handle.isDragging = false;
					handle.identifier = null;
				}
			},
			onSliderRightTouchStart(index, event) {
				const touch = event.touches[event.touches.length - 1]; // 当前的最后一个触摸点
				const handle = this.sliderRightList[index];
				if (!handle.isDragging) {
					handle.isDragging = true;
					handle.startX = touch.clientX - handle.x;
					handle.startY = touch.clientY - handle.y;
					handle.identifier = touch.identifier; // 记录触摸点的 identifier
				}
			},
			onSliderRightTouchMove(index, event) {
				const handle = this.sliderRightList[index];
				if (!handle.isDragging) return;

				// 根据 identifier 找到当前触摸点
				const touch = Array.from(event.touches).find(
					(t) => t.identifier == handle.identifier
				);
				if (!touch) return;

				const newX = touch.clientX - handle.startX;

				const maxX = 182;

				handle.x = Math.min(Math.max(newX, 0), maxX)

				if (handle.x <= (this.sliderLeftList[index].x + 36)) {
					handle.x = this.sliderLeftList[index].x + 36
				}
				this.sliderLeftList[index].box2Width = handle.x - this.sliderLeftList[index].x
				let channelItem = this.carInfo.appCarChannelList[index]
				channelItem.maxValue = Math.round(channelItem.defaultMaxValue - (((channelItem.defaultMaxValue -
					channelItem.defaultMinValue) / 200) * (182 - handle.x)))
			},
			onSliderRightTouchEnd(index, event) {
				const handle = this.sliderRightList[index];
				const touch = Array.from(event.changedTouches).find(
					(t) => t.identifier == handle.identifier
				);
				if (touch) {
					handle.isDragging = false;
					handle.identifier = null;
				}
			},
			moveRocker(positionX, positionY, id) {
				this.checkPosition(positionX, positionY, id)
			},
			stopMoveRocker(id) {
				console.log("停止移动了！！")
				this.sendEndMessage(id)
			},
			sendEndMessage(id) {
				if (id == 'motor' && this.carInfo) {
					clearInterval(this.intervarTime)
					this.sendMessage(JSON.stringify({
						"bizCode": 602, //固定值
						"channelNum": this.getChannelNum(1), // 通道号1-8
						"duty": 1500, //通道信号的高电平时间（单位微秒）
						"timestamp": this.getTimestamp(),
						"mac": this.macAddress //设备mac地址
					}))
					this.sendMessage(JSON.stringify({
						"bizCode": 602, //固定值
						"channelNum": this.getChannelNum(2), // 通道号1-8
						"duty": 1500, //通道信号的高电平时间（单位微秒）
						"timestamp": this.getTimestamp(),
						"mac": this.macAddress //设备mac地址
					}))
					this.oldDirection = ''
					this.newDirection = ''
				} else if (id == 'rudder' && this.carInfo) {
					clearInterval(this.rudderIntervarTime)
					this.sendMessage(JSON.stringify({
						"bizCode": 602, //固定值
						"channelNum": this.getChannelNum(3), // 通道号1-8
						"duty": 1500, //通道信号的高电平时间（单位微秒）
						"timestamp": this.getTimestamp(),
						"mac": this.macAddress //设备mac地址
					}))
					this.sendMessage(JSON.stringify({
						"bizCode": 602, //固定值
						"channelNum": this.getChannelNum(4), // 通道号1-8
						"duty": 1500, //通道信号的高电平时间（单位微秒）
						"timestamp": this.getTimestamp(),
						"mac": this.macAddress //设备mac地址
					}))
					this.rudderoldDirection = ''
					this.ruddernewDirection = ''
				}
			},

			sendFiveMessage(number, value) {
				this.fiveActive = value
				clearInterval(this.fiveIntervarTime);
				this.fiveIntervarTime = setInterval(() => {
					this.sendMessage(JSON.stringify({
						bizCode: 602,
						channelNum: this.getChannelNum(5),
						duty: this.getDutyValue(5, number),
						timestamp: this.getTimestamp(),
						mac: this.macAddress
					}))
				}, 1500)
			},
			sendSixMessage(number, value) {
				this.sixActive = value
				clearInterval(this.sixIntervarTime);
				this.sixIntervarTime = setInterval(() => {
					this.sendMessage(JSON.stringify({
						bizCode: 602,
						channelNum: this.getChannelNum(6),
						duty: this.getDutyValue(6, number),
						timestamp: this.getTimestamp(),
						mac: this.macAddress
					}))
				}, 1500)
			},

			checkPosition(positionX, positionY, id) {
				if (positionX > 45 && positionX < 55) {
					switch (true) {
						case positionY <= 10 && positionY >= 0:
							id == 'motor' ? this.newDirection = "top5" : id == 'rudder' ? this.ruddernewDirection =
								"top5" : ''
							break;
						case positionY <= 20 && positionY > 10:
							id == 'motor' ? this.newDirection = "top4" : id == 'rudder' ? this.ruddernewDirection =
								"top4" : ''
							break;
						case positionY <= 30 && positionY > 20:
							id == 'motor' ? this.newDirection = "top3" : id == 'rudder' ? this.ruddernewDirection =
								"top3" : ''
							break;
						case positionY <= 40 && positionY > 30:
							id == 'motor' ? this.newDirection = "top2" : id == 'rudder' ? this.ruddernewDirection =
								"top2" : ''
							break;
						case positionY <= 45 && positionY > 40:
							id == 'motor' ? this.newDirection = "top1" : id == 'rudder' ? this.ruddernewDirection =
								"top1" : ''
							break;
						case positionY <= 55 && positionY > 45:
							id == 'motor' ? this.newDirection = "motorStop" : id == 'rudder' ? this.ruddernewDirection =
								"rudderStop" : ''
							break;
						case positionY <= 60 && positionY > 55:
							id == 'motor' ? this.newDirection = "bottom1" : id == 'rudder' ? this.ruddernewDirection =
								"bottom1" : ''
							break;
						case positionY <= 70 && positionY > 60:
							id == 'motor' ? this.newDirection = "bottom2" : id == 'rudder' ? this.ruddernewDirection =
								"bottom2" : ''
							break;
						case positionY <= 80 && positionY > 70:
							id == 'motor' ? this.newDirection = "bottom3" : id == 'rudder' ? this.ruddernewDirection =
								"bottom3" : ''
							break;
						case positionY <= 90 && positionY > 80:
							id == 'motor' ? this.newDirection = "bottom4" : id == 'rudder' ? this.ruddernewDirection =
								"bottom4" : ''
							break;
						case positionY <= 100 && positionY > 90:
							id == 'motor' ? this.newDirection = "bottom5" : id == 'rudder' ? this.ruddernewDirection =
								"bottom5" : ''
							break;
					}
				} else if (positionY > 45 && positionY < 55) {
					switch (true) {
						case positionX <= 10 && positionX >= 0:
							id == 'motor' ? this.newDirection = "left5" : this.ruddernewDirection = "left5"
							break;
						case positionX <= 20 && positionX > 10:
							id == 'motor' ? this.newDirection = "left4" : this.ruddernewDirection = "left4"
							break;
						case positionX <= 30 && positionX > 20:
							id == 'motor' ? this.newDirection = "left3" : this.ruddernewDirection = "left3"
							break;
						case positionX <= 40 && positionX > 30:
							id == 'motor' ? this.newDirection = "left2" : this.ruddernewDirection = "left2"
							break;
						case positionX <= 45 && positionX > 40:
							id == 'motor' ? this.newDirection = "left1" : this.ruddernewDirection = "left1"
							break;
						case positionX <= 55 && positionX > 45:
							id == 'motor' ? this.newDirection = "motorStop" : this.ruddernewDirection = "rudderStop"
							break;
						case positionX <= 60 && positionX > 55:
							id == 'motor' ? this.newDirection = "right1" : this.ruddernewDirection = "right1"
							break;
						case positionX <= 70 && positionX > 60:
							id == 'motor' ? this.newDirection = "right2" : this.ruddernewDirection = "right2"
							break;
						case positionX <= 80 && positionX > 70:
							id == 'motor' ? this.newDirection = "right3" : this.ruddernewDirection = "right3"
							break;
						case positionX <= 90 && positionX > 80:
							id == 'motor' ? this.newDirection = "right4" : this.ruddernewDirection = "right4"
							break;
						case positionX <= 100 && positionX > 90:
							id == 'motor' ? this.newDirection = "right5" : this.ruddernewDirection = "right5"
							break;
					}
				} else if (positionX < 20 && positionY < 20) {
					switch (id) {
						case 'motor':
							this.newDirection = "leftTop"
							break;
						case 'rudder':
							this.ruddernewDirection = "leftTop"
							break;
					}
				} else if (positionX < 20 && positionY > 80) {
					switch (id) {
						case 'motor':
							this.newDirection = "leftBottom"
							break;
						case 'rudder':
							this.ruddernewDirection = "leftBottom"
							break;
					}
				} else if (positionX > 80 && positionY > 80) {
					switch (id) {
						case 'motor':
							this.newDirection = "rightBottom"
							break;
						case 'rudder':
							this.ruddernewDirection = "rightBottom"
							break;
					}
				} else if (positionX > 80 && positionY < 20) {
					switch (id) {
						case 'motor':
							this.newDirection = "rightTop"
							break;
						case 'rudder':
							this.ruddernewDirection = "rightTop"
							break;
					}
				}

				this.updateDirection(id)
			},

			updateDirection(id) {
				// Duty 值映射表
				const dutyMap = {
					"leftTop": {
						dutyX: this.getDutyValue(1, -5),
						channelNumX: this.getChannelNum(1),
						dutyY: this.getDutyValue(2, 5),
						channelNumY: this.getChannelNum(2)
					},
					"leftBottom": {
						dutyX: this.getDutyValue(1, -5),
						channelNumX: this.getChannelNum(1),
						dutyY: this.getDutyValue(2, -5),
						channelNumY: this.getChannelNum(2)
					},
					"rightTop": {
						dutyX: this.getDutyValue(1, 5),
						channelNumX: this.getChannelNum(1),
						dutyY: this.getDutyValue(2, 5),
						channelNumY: this.getChannelNum(2)
					},
					"rightBottom": {
						dutyX: this.getDutyValue(1, 5),
						channelNumX: this.getChannelNum(1),
						dutyY: this.getDutyValue(2, -5),
						channelNumY: this.getChannelNum(2)
					},
					"top1": {
						duty: this.getDutyValue(2, 1),
						channelNum: this.getChannelNum(2)
					},
					"top2": {
						duty: this.getDutyValue(2, 2),
						channelNum: this.getChannelNum(2)
					},
					"top3": {
						duty: this.getDutyValue(2, 3),
						channelNum: this.getChannelNum(2)
					},
					"top4": {
						duty: this.getDutyValue(2, 4),
						channelNum: this.getChannelNum(2)
					},
					"top5": {
						duty: this.getDutyValue(2, 5),
						channelNum: this.getChannelNum(2)
					},
					"motorStop": {
						duty: 1500,
						channelNum: this.getChannelNum(2)
					},
					"bottom1": {
						duty: this.getDutyValue(2, -1),
						channelNum: this.getChannelNum(2)
					},
					"bottom2": {
						duty: this.getDutyValue(2, -2),
						channelNum: this.getChannelNum(2)
					},
					"bottom3": {
						duty: this.getDutyValue(2, -3),
						channelNum: this.getChannelNum(2)
					},
					"bottom4": {
						duty: this.getDutyValue(2, -4),
						channelNum: this.getChannelNum(2)
					},
					"bottom5": {
						duty: this.getDutyValue(2, -5),
						channelNum: this.getChannelNum(2)
					},
					"right1": {
						duty: this.getDutyValue(1, 1),
						channelNum: this.getChannelNum(1)
					},
					"right2": {
						duty: this.getDutyValue(1, 2),
						channelNum: this.getChannelNum(1)
					},
					"right3": {
						duty: this.getDutyValue(1, 3),
						channelNum: this.getChannelNum(1)
					},
					"right4": {
						duty: this.getDutyValue(1, 4),
						channelNum: this.getChannelNum(1)
					},
					"right5": {
						duty: this.getDutyValue(1, 5),
						channelNum: this.getChannelNum(1)
					},
					"left1": {
						duty: this.getDutyValue(1, -1),
						channelNum: this.getChannelNum(1)
					},
					"left2": {
						duty: this.getDutyValue(1, -2),
						channelNum: this.getChannelNum(1)
					},
					"left3": {
						duty: this.getDutyValue(1, -3),
						channelNum: this.getChannelNum(1)
					},
					"left4": {
						duty: this.getDutyValue(1, -4),
						channelNum: this.getChannelNum(1)
					},
					"left5": {
						duty: this.getDutyValue(1, -5),
						channelNum: this.getChannelNum(1)
					}
				};
				const rudderDutyMap = {
					"leftTop": {
						dutyX: this.getDutyValue(4, -4),
						channelNumX: this.getChannelNum(4),
						dutyY: this.getDutyValue(3, -4),
						channelNumY: this.getChannelNum(3)
					},
					"leftBottom": {
						dutyX: this.getDutyValue(4, -4),
						channelNumX: this.getChannelNum(4),
						dutyY: this.getDutyValue(3, 4),
						channelNumY: this.getChannelNum(3)
					},
					"rightTop": {
						dutyX: this.getDutyValue(4, 4),
						channelNumX: this.getChannelNum(4),
						dutyY: this.getDutyValue(3, -4),
						channelNumY: this.getChannelNum(3)
					},
					"rightBottom": {
						dutyX: this.getDutyValue(4, 4),
						channelNumX: this.getChannelNum(4),
						dutyY: this.getDutyValue(3, 4),
						channelNumY: this.getChannelNum(3)
					},
					"top1": {
						duty: this.getDutyValue(3, -1),
						channelNum: this.getChannelNum(3)
					},
					"top2": {
						duty: this.getDutyValue(3, -2),
						channelNum: this.getChannelNum(3)
					},
					"top3": {
						duty: this.getDutyValue(3, -3),
						channelNum: this.getChannelNum(3)
					},
					"top4": {
						duty: this.getDutyValue(3, -4),
						channelNum: this.getChannelNum(3)
					},
					"top5": {
						duty: this.getDutyValue(3, -5),
						channelNum: this.getChannelNum(3)
					},
					"bottom1": {
						duty: this.getDutyValue(3, 1),
						channelNum: this.getChannelNum(3)
					},
					"bottom2": {
						duty: this.getDutyValue(3, 2),
						channelNum: this.getChannelNum(3)
					},
					"bottom3": {
						duty: this.getDutyValue(3, 3),
						channelNum: this.getChannelNum(3)
					},
					"bottom4": {
						duty: this.getDutyValue(3, 4),
						channelNum: this.getChannelNum(3)
					},
					"bottom5": {
						duty: this.getDutyValue(3, 5),
						channelNum: this.getChannelNum(3)
					},
					"right1": {
						duty: this.getDutyValue(4, 1),
						channelNum: this.getChannelNum(4)
					},
					"right2": {
						duty: this.getDutyValue(4, 2),
						channelNum: this.getChannelNum(4)
					},
					"right3": {
						duty: this.getDutyValue(4, 3),
						channelNum: this.getChannelNum(4)
					},
					"right4": {
						duty: this.getDutyValue(4, 4),
						channelNum: this.getChannelNum(4)
					},
					"right5": {
						duty: this.getDutyValue(4, 5),
						channelNum: this.getChannelNum(4)
					},
					"rudderStop": {
						duty: 1500,
						channelNum: this.getChannelNum(4)
					},
					"left1": {
						duty: this.getDutyValue(4, -1),
						channelNum: this.getChannelNum(4)
					},
					"left2": {
						duty: this.getDutyValue(4, -2),
						channelNum: this.getChannelNum(4)
					},
					"left3": {
						duty: this.getDutyValue(4, -3),
						channelNum: this.getChannelNum(4)
					},
					"left4": {
						duty: this.getDutyValue(4, -4),
						channelNum: this.getChannelNum(4)
					},
					"left5": {
						duty: this.getDutyValue(4, -5),
						channelNum: this.getChannelNum(4)
					}
				};

				// 清理和启动定时器的函数
				const clearAndStartInterval = (direction, dutyMap, intervalTime, id =
					'motor') => {
					clearInterval(id == 'rudder' ? this.rudderIntervarTime : id == 'motor' ? this
						.intervarTime : '');

					// 停止信号直接发送一次
					if (direction == 'motorStop' || direction == 'rudderStop') {
						this.sendMessage(JSON.stringify({
							bizCode: 602, //固定值
							channelNum: dutyMap[direction].channelNum, // 通道号1-8
							duty: dutyMap[direction].duty, //通道信号的高电平时间（单位微秒）
							timestamp: this.getTimestamp(),
							mac: this.macAddress //设备mac地址
						}));
					} else {
						var intervalID = null
						if (direction == 'leftTop' || direction == 'leftBottom' || direction == 'rightTop' ||
							direction == 'rightBottom') {
							const sendDutyUpdate = () => {
								this.sendMessage(JSON.stringify({
									bizCode: 602, //固定值
									channelNum: dutyMap[direction].channelNumX, // 通道号1-8
									duty: dutyMap[direction].dutyX, //通道信号的高电平时间（单位微秒）
									timestamp: this.getTimestamp(),
									mac: this.macAddress //设备mac地址
								}));
								this.sendMessage(JSON.stringify({
									bizCode: 602, //固定值
									channelNum: dutyMap[direction].channelNumY, // 通道号1-8
									duty: dutyMap[direction].dutyY, //通道信号的高电平时间（单位微秒）
									timestamp: this.getTimestamp(),
									mac: this.macAddress //设备mac地址
								}));
							};
							intervalID = setInterval(sendDutyUpdate, intervalTime);
						} else {
							const sendDutyUpdate = () => {
								this.sendMessage(JSON.stringify({
									bizCode: 602, //固定值
									channelNum: dutyMap[direction].channelNum, // 通道号1-8
									duty: dutyMap[direction].duty, //通道信号的高电平时间（单位微秒）
									timestamp: this.getTimestamp(),
									mac: this.macAddress //设备mac地址
								}));
							};
							intervalID = setInterval(sendDutyUpdate, intervalTime);
						}
						// 存储定时器ID
						if (id == 'motor') {
							this.intervarTime = intervalID;
						} else if (id == 'rudder') {
							this.rudderIntervarTime = intervalID;
						}
					}
				};

				// 电机方向变化处理
				if (this.newDirection !== this.oldDirection) {
					clearAndStartInterval(this.newDirection, dutyMap, 100, id);
					this.oldDirection = this.newDirection;
				}

				// 舵机方向变化处理
				if (this.ruddernewDirection !== this.rudderoldDirection) {
					clearAndStartInterval(this.ruddernewDirection, rudderDutyMap, 100, id);
					this.rudderoldDirection = this.ruddernewDirection;
				}

			},

			getTimestamp() {
				return new Date().getTime().toString()
			},

			initWebSocket() {
				this.socket = uni.connectSocket({
					url: `ws://${socketUrl}/ws/${this.macAddress}`,
					success: () => {
						console.log('WebSocket连接成功');
						console.log('WebSocket连接地址：', socketUrl);
					},
					fail: (err) => {
						console.error('WebSocket连接失败', err);
					},
				});

				// 监听 WebSocket 打开事件
				this.socket.onOpen(() => {
					console.log('WebSocket已打开');
					this.isSocket = true
					// this.sendFiveMessage(0, 'center')
					// this.sendSixMessage(0, 'center')
					// this.startHeartbeat(); // 开始心跳机制
				});

				// 监听 WebSocket 收到消息事件
				this.socket.onMessage((event) => {
					this.message = event.data
					// 如果是心跳响应
					if (event.data == 'pong') {
						console.log('收到心跳响应: pong');
						clearTimeout(this.heartbeatTimeout);
					} else {
						let data = JSON.parse(event.data)
						if (data.data && data.data.bizCode == 501) {
							this.socket501Data = data.data
						} else if (data.data && data.data.bizCode == 502) {
							this.socket502Data = data.data
						} else if (data.data && data.data.bizCode == 503) {
							this.socket503Data = data.data
						} else if (data.data && data.data.bizCode == 504) {
							this.socket504Data = data.data
						}
					}
				});

				// 监听 WebSocket 关闭事件
				this.socket.onClose(() => {
					console.log('WebSocket已关闭');
					this.isSocket = false
				});

				// 监听 WebSocket 错误事件
				this.socket.onError((err) => {
					console.error('WebSocket发生错误', err);
					this.isSocket = false
				});
			},

			// 开始心跳机制
			startHeartbeat() {
				// 定时发送心跳消息
				this.heartbeatInterval = setInterval(() => {
					this.sendMessage('ping')
					this.resetHeartbeatTimeout();
				}, 10000);

				// 设置心跳超时检测
			},

			// 重置心跳超时计时器
			resetHeartbeatTimeout() {
				this.heartbeatTimeout = setTimeout(() => {
					console.error('心跳超时，连接断开');
					this.socket.onClose();
					this.reconnect();
				}, 10000);
			},

			// 重连逻辑
			reconnect() {
				if (this.reconnectAttempts >= this.maxReconnectAttempts || this.isBack) {
					return;
				}

				this.reconnectAttempts++;

				this.reconnectTimeout = setTimeout(() => {
					this.initWebSocket(); // 重新初始化 WebSocket 连接
				}, 3000); // 每3秒尝试重连一次
			},

			// 清理心跳和重连
			clearHeartbeat() {
				clearInterval(this.heartbeatInterval);
				clearInterval(this.fiveIntervarTime);
				clearInterval(this.sixIntervarTime);
				clearTimeout(this.heartbeatTimeout);
				clearTimeout(this.reconnectTimeout);
			},

			// 发送消息
			sendMessage(message) {
				if (this.socket) {
					this.socket.send({
						data: message,
						success: () => {
							console.log('消息发送成功:', message);
						},
						fail: (err) => {
							console.error('消息发送失败:', err);
						},
					});
				} else {
					console.error('WebSocket尚未连接');
				}
			},

			// 关闭 WebSocket
			closeWebSocket() {
				if (this.socket) {
					this.socket.close({
						success: () => {
							console.log('WebSocket关闭成功');
						},
						fail: (err) => {
							console.error('WebSocket关闭失败:', err);
						},
					});
				}
			},

			getDutyValue(buttonNo, number) {
				if (this.carInfo.appCarChannelList && this.carInfo.appCarChannelList.length > 0) {

					let maxValue = this.carInfo.appCarChannelList.find((item) => item.buttonNo == buttonNo)
						.maxValue
					let minValue = this.carInfo.appCarChannelList.find((item) => item.buttonNo == buttonNo)
						.minValue
					if (number > 0) {
						if (number == 5) {
							return maxValue
						}
						if (maxValue == 1600) {
							return 1600
						} else {
							return (((maxValue - 1600) / 4) * (number - 1)) + 1600
						}
					} else if (number == 0) {
						return 1500
					} else if (number < 0) {
						if (number == -5) {
							return minValue
						}
						if (minValue == 1400) {
							return 1400
						} else {
							return 1400 - (((1400 - minValue) / 4) * (Math.abs(number) - 1))
						}
					}
				} else {
					return 0
				}
			},
			getChannelNum(buttonNo) {
				if (this.carInfo.appCarChannelList && this.carInfo.appCarChannelList.length > 0) {

					let channelNum = this.carInfo.appCarChannelList.find((item) => item.buttonNo == buttonNo)
						.channelNum
					return channelNum
				} else {
					return 1
				}
			}

		}
	}
</script>

<style scoped lang="less">
	.testDevice {
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.8);
	}

	.body {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: 9;
	}

	.rockerBtns {
		position: absolute;
		bottom: 0;
		padding: 24px 0 24px 24px;
		display: flex;
		flex-direction: row;
		justify-content: space-between;

		.actionButtonBox {

			height: auto;
			display: flex;
			flex-direction: column;
			gap: 1px;
			background-color: #000;
			border-radius: 6px;
			overflow: hidden;

			.actionButton {
				flex: 1;
				width: 60px;
				margin-top: 1px;
				background-color: #FFF;
				display: flex;
				justify-content: center;
				align-items: center;
			}

			.activeFiveButton,
			.activeSixButton {
				background-color: #ebe388;
			}
		}
	}

	.verifyBox {
		color: #000;
		position: absolute;
		z-index: 99999999999;
		left: 85px;
		top: 20px;
		display: flex;
		flex-direction: row;
		align-items: center;

		.verifyContent {
			padding: 16px;
			background-color: #FFF;
			margin-left: -5px;

			.title {
				flex-direction: row;
				margin-bottom: 16px;
			}

		}
	}

	.verify {
		width: 200px;
		height: 40px;
		border-radius: 20px;
		background-color: #b9ffff;
		position: relative;
		overflow: hidden;

		.content {
			width: 200px;
			height: 40px;
			position: absolute;
			background-color: #37eb00;
			border-radius: 20px;

			.round {
				position: absolute;
				right: 0;
				width: 40px;
				height: 40px;
				border-radius: 20px;
				background-color: #FFF;
			}
		}
	}

	.topInfo {
		position: absolute;
		z-index: 9;
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		width: 100%;
		box-sizing: border-box;
		padding: 32px 16px;
		font-size: 15px;
		color: #FFF;

		._item {
			flex: 1;
			display: flex;
			flex-direction: row;
			justify-content: center;
			gap: 20px;
		}
	}
</style>